name: test

on:
  push:
    paths-ignore:
      - 'LICENSE'
      - 'pkg/*'

env:
  RUNS_ON: ubuntu-latest
  CACHE_DIR: ~/.ci-cache
  GROUP_NAME: unkontributors
  APP_NAME: super_unko

jobs:
  skip:
    runs-on: ${{ env.RUNS_ON }}
    steps:
      - run: echo "Skip job"

  before:
    runs-on: ${{ env.RUNS_ON }}
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - run: echo "no [skip ci]"

  build-image:
    runs-on: ${{ env.RUNS_ON }}
    needs: before
    steps:
      - uses: actions/checkout@v1
      - name: Cache docker image
        id: cache-bash-image
        uses: actions/cache@v1
        with:
          path: ${{ env.CACHE_DIR }}
          key: bash-${{ hashFiles('**/Dockerfile') }}
      - name: Load docker image
        if: steps.cache-bash-image.outputs.cache-hit == 'true'
        run: |
          gunzip ${{ env.CACHE_DIR }}/${{ env.APP_NAME }}.gz
          docker load -i ${{ env.CACHE_DIR }}/${{ env.APP_NAME }}
      - name: Build ${{ env.APP_NAME }} image
        if: steps.cache-bash-image.outputs.cache-hit != 'true'
        run: docker-compose build ${{ env.APP_NAME }}
      - run: mkdir -p ${{ env.CACHE_DIR }}
      - name: Save docker image cache
        run: docker save "${{ env.GROUP_NAME }}/${{ env.APP_NAME }}" | gzip -c > ${{ env.CACHE_DIR }}/${{ env.APP_NAME }}.gz

  test:
    runs-on: ${{ env.RUNS_ON }}
    strategy:
      matrix:
        version: [default, "3.2", "4.0", "4.1", "4.2", "4.3", "4.4", "5.0"]
    needs: build-image
    steps:
      - uses: actions/checkout@v1
      - name: Cache docker image
        id: cache-bash-image
        uses: actions/cache@v1
        with:
          path: ${{ env.CACHE_DIR }}
          key: bash-${{ hashFiles('**/Dockerfile') }}
      - name: Load docker image
        if: steps.cache-bash-image.outputs.cache-hit == 'true'
        run: |
          gunzip ${{ env.CACHE_DIR }}/${{ env.APP_NAME }}.gz
          docker load -i ${{ env.CACHE_DIR }}/${{ env.APP_NAME }}
      - name: Test
        run: docker-compose -f docker-compose-ci.yml run ci_sh_${{ matrix.version }}

  format:
    runs-on: ${{ env.RUNS_ON }}
    needs: before
    steps:
      - uses: actions/checkout@v1
      - name: Run format
        run: ./linter.sh format

  lint:
    runs-on: ${{ env.RUNS_ON }}
    needs: before
    steps:
      - uses: actions/checkout@v1
      - name: Run lint
        run: ./linter.sh lint

  update-repository:
    runs-on: ${{ env.RUNS_ON }}
    needs: [test, format, lint]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1

        # deb, rpmファイルの生成
      - name: Set latest tag version to output
        id: vars
        run: echo ::set-output name=tag::$(git tag -l '*.*.*' | sort -V | tail -n 1)
      - name: Set tag version to .tar2package.yml
        run: sed -i 's:\$VERSION:${{ steps.vars.outputs.tag }}:g' .tar2package.yml
      - name: Print .tar2package.yml
        run: cat .tar2package.yml
      - name: Generate packages
        run: ./package.sh
      - name: Git commit packages
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pkg/*
          git commit -m ":arrow_up: [CI] update pkg/super_unko.deb and pkg/super_unko.rpm"

        # READMEに目次を埋め込む
      - name: Install gh-md-toc
        run: |
          wget https://raw.githubusercontent.com/ekalinin/github-markdown-toc/master/gh-md-toc
          chmod +x gh-md-toc
      - name: Insert TOC
        run: |
          ./gh-md-toc --insert *.md doc/*.md
          rm *.md.orig.*
          rm *.md.toc.*
          rm doc/*.md.orig.*
          rm doc/*.md.toc.*
      - name: Git commit documents
        run: |
          git add *.md doc/*.md
          git commit -m ":memo: [CI] update TOC"

      - name: Git push
        uses: ad-m/github-push-action@v0.5.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
